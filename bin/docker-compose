#!/bin/sh

# Check if following packages are installed:
#   -) docker-compose
#   -) on Linux: readlink
#   -) on Darwin(Mac): greadlink
#   (docker-compose && (readlink || greadlink)) || echo ERROR; exit;
command -v docker-compose >/dev/null 2>&1 && (command -v readlink >/dev/null 2>&1 || command -v greadlink >/dev/null 2>&1) || { echo >&2 "ERROR: docker-compose or command readling or command greadlink is not available on your system.\nPlease install the appropriate software tools!\nGood bye and hope we see you soon!"; exit 1; }

# Store the command for detecting the OS (operating system)
# [Host: command output]; Linux: Linux; Mac: Darwin
unameOut="$(uname -s)"

# Comment for future tasks - Include other operating systems
# ==> these OS's have to be included in the case-esac statement and mybe some other changes are requiered
# CYGWIN*)    machine=Cygwin;;  Another OS => currently not supported;
#       Translater to run GNU/Linux, BSD, and Unix programms on Windows
# MINGW*)     machine=MinGw;;   Another OS => currently not supported;
#       open source software development environment to create Microsoft Windows applications

# Detect the OS
case "${unameOut}" in
                # Supported OS
    Linux*)     OS=Linux;;
    Darwin*)    OS=Darwin;;

                # The OS is not supported. Give feedback and terminate with error
    *)          { echo >&2 "ERROR: You are not working on a supported OS! Currently shellhub supports Linux and Darwin(Mac)."; exit 1; }
esac

# OS is already checked before in the case statement -> as of now the OS is supported
echo "You are working on a supported OS! Happy dockering!"
echo "Your OS is: " ${OS}

# Set the appropriate working directories for the specific OS
# Supported Linux OS
if [ $OS == 'Linux' ]
then
    WORKDIR=$(dirname $(readlink -f $0))/../
fi
# Supported Darwin (Mac) OS
if [ $OS == 'Darwin' ]
then
    WORKDIR=$(dirname $(greadlink -f $0))/../
fi

# Change to working directory
cd $WORKDIR

set -o allexport

[ -f .env.override ] && . ./.env.override

set +o allexport

COMPOSE_FILE="docker-compose.yml"

[ "$SHELLHUB_AUTO_SSL" = "true" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.autossl.yml"
[ "$SHELLHUB_ENV" = "development" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.dev.yml"
[ -f docker-compose.override.yml ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.override.yml"

[ "$SHELLHUB_AUTO_SSL" = "true" ] && [ "$SHELLHUB_HTTP_PORT" != "0" ] && cat <<EOF >&2
WARNING: When using SHELLHUB_AUTO_SSL=true you need to set SHELLHUB_HTTP_PORT=0 to avoid exposing plain HTTP service to the internet
EOF

export COMPOSE_FILE

docker-compose $*
